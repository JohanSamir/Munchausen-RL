#import dopamine.discrete_domains.gym_lib
#import dopamine.discrete_domains.run_experiment
#import dopamine.agents.dqn.dqn_agent
#import dopamine.replay_memory.circular_replay_buffer
#import gin.tf.external_configurables

import dopamine.discrete_domains.gym_lib
import dopamine.discrete_domains.run_experiment
import dopamine.jax.networks
import dopamine.jax.agents.dqn.dqn_agent
import dopamine.replay_memory.circular_replay_buffer

import networks_new
import m_dqn


JaxDQNAgent.observation_shape = %gym_lib.CARTPOLE_OBSERVATION_SHAPE
JaxDQNAgent.observation_dtype = %gym_lib.CARTPOLE_OBSERVATION_DTYPE
JaxDQNAgent.stack_size = %gym_lib.CARTPOLE_STACK_SIZE
JaxDQNAgent.network = @networks.CartpoleDQNNetwork
JaxDQNAgent.gamma = 0.99
JaxDQNAgent.update_horizon = 1
JaxDQNAgent.min_replay_history = 500
JaxDQNAgent.update_period = 4
JaxDQNAgent.target_update_period = 100
JaxDQNAgent.epsilon_fn = @dqn_agent.identity_epsilon

#MunchausenDQNAgent.tf_device = '/cpu:*'  # use '/cpu:*' for non-GPU version
MunchausenDQNAgentNew.tau = 0.03 # 1st 0.03 , 0.2, 0.6
MunchausenDQNAgentNew.alpha = 0.9 # 1st 0.9 -> 1, 0.9
MunchausenDQNAgentNew.clip_value_min = -1 # 1st -1 -> -10, -5
MunchausenDQNAgentNew.interact = 'greedy'
MunchausenDQNAgentNew.optimizer = 'adam'

#dqn/tf.train.AdamOptimizer.learning_rate = 0.001
#dqn/tf.train.AdamOptimizer.epsilon = 0.0003125
create_optimizer = @dqn_agent.create_optimizer
create_optimizer.learning_rate = 0.001
create_optimizer.eps = 3.125e-4

create_gym_environment.environment_name = 'CartPole'
create_gym_environment.version = 'v0'
TrainRunner.create_environment_fn = @gym_lib.create_gym_environment

Runner.num_iterations = 30#500
Runner.training_steps = 1000
#Runner.evaluation_steps = 1000
Runner.max_steps_per_episode = 200#500


OutOfGraphReplayBuffer.replay_capacity = 50000
OutOfGraphReplayBuffer.batch_size = 128
